@model CapstoneProject.Models.ViewModels.GroupProject
@{
    ViewBag.Title = "Details";
}
<h2>Group Details</h2>
@Html.ActionLink("Go Back", "Groups", null, new { @class = "btn btn-default" })
@{
    <div>
        <hr />
        <dl class="dl-horizontal">
            <dt>
                @Html.DisplayNameFor(model => model.Group.GroupName)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Group.GroupName)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Group.Description)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Group.Description)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Group.Status)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Group.Status)
            </dd>
        </dl>
    </div>

    <hr />
        <ul class="tab">
            <li><a href="javascript:void(0)" class="tablinks" id="skillset" onclick="openTab(event, 'Skillset')">Skillset</a></li>
            <li><a href="javascript:void(0)" class="tablinks" onclick="openTab(event, 'Members')">Members</a></li>
        </ul>
        <div id="Skillset" class="tabcontent">
            <h3>Group Skillset</h3>
            <div><img src="@Url.Action("CreateChart", "Students", new { id = Model.Group.Skillset.Id })" /></div>
        </div>
    var studList = Model.Group.Students.ToList();
    <div id="Members" class="tabcontent">
        <h3>Members</h3>
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => studList[0].FirstName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => studList[0].LastName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => studList[0].Email)
                </th>
                <th></th>
            </tr>
            @for (int i = 0; i < studList.Count(); i++)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => studList[i].FirstName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => studList[i].LastName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => studList[i].Email)
                    </td>
                    <td>@Html.ActionLink("View Profile", "StudentProfile", "Students", new { id = studList[i].UserId, gid = Model.Group.GroupId }, new { @class = "btn btn-info", target = "_blank" })</td>
                </tr>
            }
        </table>
    </div>
    <h3>Projects </h3>
    if (Model.Group.Project != null)
    {
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => Model.Group.Project.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => Model.Group.Project.Description)
                </th>
                <th>
                    @Html.DisplayNameFor(model => Model.Group.Project.Type)
                </th>
                <th></th>
            </tr>
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => Model.Group.Project.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => Model.Group.Project.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => Model.Group.Project.Type)
                </td>

                <td>
                    <button type="button" id="btnUnassign" name="@Model.Group.Project.ProjectId" class="btn btn-danger" data-toggle="modal" data-target="#unassignModal">Unassign Project</button>
                </td>
            </tr>

        </table>
    }
    else
    {
        var projList = Model.Projects.ToList();
        if (projList.Count() == 0)
        {
            <p> No available projects. </p>
        }
        else
        {
            <table class="table">
                <tr>
                    <th>Rank</th>
                    <th width="20%">
                        @Html.DisplayNameFor(model => projList[0].Name)
                    </th>
                    <th width="60%">
                        @Html.DisplayNameFor(model => projList[0].Description)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => projList[0].Type)
                    </th>
                </tr>
                @for (int i = 0, len = projList.Count(); i < len; i++)
                {
                    <tr>
                        <td>
                            @(i + 1)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => projList[i].Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => projList[i].Description)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => projList[i].Type)
                        </td>
                    </tr>
                }
            </table>

        }
    }

}
<!-- Modal -->
<div id="unassignModal" class="modal fade" role="dialog" tabindex="-1">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Unassign Project?</h4>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to unassign this Project?</p>
            </div>
            <div class="modal-footer">
                <input type="hidden" id="gId"value="@Model.Group.GroupId">
                <input type="hidden" id="pId" value="@Model.Group.Project.ProjectId">
                <button type="button" id="unassignProj" class="btn btn-primary">Unassign</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    document.getElementById("skillset").click();
    $(document).ready(function () {
        $('#unassignProj').on('click', function (e) {
            e.preventDefault();
            $.ajax({
                type: 'POST',
                url: "/Projects/UnassignProject/",
                data: {
                    projId: $("#pId").val(),
                    groupId:$("#gId").val()
                },
                success: function () {
                    window.location.href = "/Projects/ProjectMatch";
                },
                error: function (e) {
                    alert(e.responseText);
                }
            });
        });
    });

    function openTab(evt, tabName) {
        // Declare all variables
        var i, tabcontent, tablinks;
        // Get all elements with class="tabcontent" and hide them
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }

        // Get all elements with class="tablinks" and remove the class "active"
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }

        // Show the current tab, and add an "active" class to the link that opened the tab
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
    }
</script>
<style>
    /* Style the list */

    ul.tab {
        list-style-type: none;
        margin: 0;
        padding: 0;
        overflow: hidden;
        border: 1px solid #ccc;
        background-color: #f1f1f1;
    }

        /* Float the list items side by side */
        ul.tab li {
            float: left;
        }

            /* Style the links inside the list items */
            ul.tab li a {
                display: inline-block;
                color: black;
                text-align: center;
                padding: 14px 16px;
                text-decoration: none;
                transition: 0.3s;
                font-size: 17px;
            }

                /* Change background color of links on hover */
                ul.tab li a:hover {
                    background-color: #ddd;
                }

                /* Create an active/current tablink class */
                ul.tab li a:focus, .active {
                    background-color: #ccc;
                }

    /* Style the tab content */
    .tabcontent {
        display: none;
        padding: 6px 12px;
        border: 1px solid #ccc;
        border-top: none;
    }
</style>
